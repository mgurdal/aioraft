// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
 
syntax = "proto3";



message RequestVoteRequest {
  // Adaya ait dönem numarası
  int32 term = 1;

  // Aday numarası
  int32 candidateId = 2;

  // Adayın en son logladığı komutun indexi
  int32 lastLogIndex = 3;

  // Adayın en son logladığı komutun dönemi
  int32 lastLogTerm = 4;
}

message RequestVoteResponse {
  // Oy istenen sunucunun dönem numarası
  int32 term = 1;

  // Aday oy alması durumunda True olur
  bool voteGranted = 2;
}

message Entry {
    uint64 index = 1;

    // Log kaydının girildiği dönem
    uint64 term = 2;

    // komut ismi
    string commandName = 3;

    // Loglanan komut
    bytes command = 4;
}

message AppendEntriesRequest {
  // Lidere ait dönem numarası
  int32 term = 1;

  // Liderin idsi, takipçiye gelen bağlantıyı lidere yönlendirmek için
  int32 leaderId = 2;

  // Yeni kayıtlardan önceki son kaydın indeksi
  int32 prevLogIndex = 3;

  // prevLogIndexdeki kaydın dönem numarası
  int32 prevLogTerm = 4;

  // Kaydedilecek log girdileri. Heartbeat mesajları için boş gönderilir.
  repeated Entry entries = 5;

  // Liderin commitlediği son kaydın indeksi.
  int32 leaderCommit = 6;
}

message AppendEntriesResponse {
  // Followers current term
  int32 term = 1;

  // Index of the Followers current term
  int32 matchIndex = 2;

  // Eğer başarılı bir şekilde kayıtlar eklendiyse
  //(prevLogIndex ve prevLogTerm değerleri eşleşiyorsa) True
  bool success = 3;
}


// RaftService implements the raft pipelining receiver.
service RaftService {
  // AppendEntries performs a single append entries request / response.
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
  // RequestVote is the command used by a candidate to ask a Raft peer for a vote in an election.
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}
}
